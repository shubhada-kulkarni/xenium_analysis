---
title: "Xenium post-processing"
author:  "Shubhada Kulkarni"
date: "23 July 2024"
format: html
editor: visual
---

## INFO

This Quarto computational documents includes post-processing of already clustered Xenium data generated using `process_Xenium_data.R` script. This post-processing includes

-   \[\] Merging and batch-effect correction of data per slide.
-   \[\] Post-merging processing
-   \[\] Cell-type annotations

## Cell-type annotations

Loading required libraries
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r eval=FALSE}
library(ggplot2, lib.loc = "/beegfs/homes/skulkarni/R/x86_64-pc-linux-gnu-library/4.3")
library(Seurat, lib.loc = "/beegfs/homes/skulkarni/R/x86_64-pc-linux-gnu-library/4.3")
library(patchwork)
library(markdown)
library(rmarkdown)
library(dplyr, lib.loc = "/beegfs/homes/skulkarni/R/x86_64-pc-linux-gnu-library/4.3")
library(presto, lib.loc = "/beegfs/homes/skulkarni/R/x86_64-pc-linux-gnu-library/4.3")
library(stringr)
```

### Slide 0018072
<<<<<<< Updated upstream
Read the merged and processed Xenium data for slide 18072
=======

Read the merged and processed Xenium data for slide 18072

>>>>>>> Stashed changes
```{r eval=FALSE}
xenium.obj_18072 <- readRDS("/prj/XeniumProbeDesign/kidney_Nphs2-mice_Xenium_Martin/xenium_objects_R/0018072_merged_processed.rds")
```

I originally retain all cells. So here I filter for cells with low total counts
<<<<<<< Updated upstream
```{r eval=FALSE}
xenium.obj_18072 <- subset(xenium.obj_18072, nCount_Xenium > 65)
```

Finding marker genes using presto package (much faster than Seurat functions)
```{r eval=FALSE}
all_markers_18072 <- presto::wilcoxauc(xenium.obj_18072,  seurat_assay = "SCT", group_by = "seurat_clusters")
write.csv(all_markers_18072, "/prj/XeniumProbeDesign/kidney_Nphs2-mice_Xenium_Martin/xenium_objects_R/0018072_merged_markergenes.csv", quote = F)
```

Dimplot
=======

```{r eval=FALSE}
xenium.obj_18072 <- subset(xenium.obj_18072, nCount_Xenium > 100)
```

Finding marker genes using presto package (much faster than Seurat functions)

```{r eval=FALSE}
all_markers_18072 <- presto::wilcoxauc(xenium.obj_18072,  seurat_assay = "SCT", group_by = "seurat_clusters")
write.csv(all_markers_18072, "/prj/XeniumProbeDesign/kidney_Nphs2-mice_Xenium_Martin/xenium_objects_R/0018072_resegmented_merged_markergenes.csv", quote = F)
```

Dimplot

>>>>>>> Stashed changes
```{r fig.align='center',fig.width=20, fig.height=10}
DimPlot(xenium.obj_18072, label = T, label.size = 5) | ImageDimPlot(xenium.obj_18072)
```

nCount and nFeature plots to see gene counts
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r fig.align='center',fig.width=20, fig.height=10}
VlnPlot(xenium.obj_18072, c("nCount_Xenium", "nFeature_Xenium"), pt.size = 0)
```

Check circle versus linear expression present in each cell. For this, subset the seurat object for circle and linear
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r eval=FALSE}
all_panel <- rownames(xenium.obj_18072[["SCT"]]$counts)
circles <- all_panel[grepl("*-BSJ*", all_panel)]
linears <- setdiff(all_panel, circles)
subset_matrix_circle <- xenium.obj_18072[["SCT"]]$counts[circles,]
subset_matrix_linear <- xenium.obj_18072[["SCT"]]$counts[linears,]
object_circle <-  CreateSeuratObject(subset_matrix_circle)
object_linear <- CreateSeuratObject(subset_matrix_linear)
```

Distributions of nCount and nFeatures for linear and circular RNAs
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r fig.align='center', fig.width=9, fig.height=9}
boxplot(object_circle$nCount_RNA, object_linear$nCount_RNA, names = c("Circle", "Linear"), col = c("red","blue"), main = "Total counts per cell")

boxplot(object_circle$nFeature_RNA, object_linear$nFeature_RNA, names = c("Circle", "Linear"), col = c("red","blue"), main = "#RNA molecules per cell")
```

### Cluster-annotations
<<<<<<< Updated upstream
Featureplot function with ImageDimPlot 
=======

Featureplot function with ImageDimPlot

>>>>>>> Stashed changes
```{r eval=FALSE}
plot_featureplots <- function(gene){
  p1 <- FeaturePlot(xenium.obj_18072, c(gene), label = T) + labs(title = "On UMAP Level")
  p2 <- ImageFeaturePlot(xenium.obj_18072, features = gene, dark.background = F) + labs(title = "On Spatial Level")
  return(p1 | p2)
}
```

<<<<<<< Updated upstream
AVN subtypes from Kanemaru et al., 2023 https://www.nature.com/articles/s41586-023-06311-1 
=======
AVN subtypes from Kanemaru et al., 2023 https://www.nature.com/articles/s41586-023-06311-1

>>>>>>> Stashed changes
```{r fig.align='center',fig.width=20, fig.height=10}
FeaturePlot(xenium.obj_18072, c("TTN-FSJ3", "TNNT2-FSJ3"), label = T, label.size = 5)
```

Cardiomyocytes
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r fig.align='center', fig.width=10, fig.height=10}
FeaturePlot(xenium.obj_18072, c("ACTA2"), label = T, label.size = 5)
```

AVN-Bundle cells
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r fig.align='center',fig.width=20, fig.height=10}
FeaturePlot(xenium.obj_18072, c("LTBP2", "FBLN1"), label = T, label.size = 5)
```

Endothelial cells
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r fig.align='center',fig.width=20, fig.height=10}
FeaturePlot(xenium.obj_18072, c("VWF", "PECAM1"), label = T, label.size = 5)
```

Macrophages
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r fig.align='center',fig.width=20, fig.height=10}
FeaturePlot(xenium.obj_18072, c("CD14", "MS4A6A"), label = T, label.size = 5)
```

Rename clusters with real names
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
```{r eval=FALSE}
new.cluster.ids <- c("CM", "CM", "Endo", "Bundle","CM", "CM",
                     "AVN subtype", "Bundle", "Macrophages", "CM", "Endo", "Endo",
                     "AVN subtype", "Bundle", "Endo", "Unidentified1", "Unidentified2", "Unidentified3")
names(new.cluster.ids) <- levels(xenium.obj_18072)
xenium.obj_18072 <- RenameIdents(xenium.obj_18072, new.cluster.ids)
```

### Some checks for circles
<<<<<<< Updated upstream
#### Expression of circle w.r.t. their linear counterpart
We have 27 circles in our current dataset. (after filtering)
=======

#### Expression of circle w.r.t. their linear counterpart

We have 27 circles in our current dataset. (after filtering)

>>>>>>> Stashed changes
```{r eval=FALSE}
all_panel <- Features(xenium.obj_18072)
circles <- all_panel[grepl("*-BSJ*", all_panel)]
```

<<<<<<< Updated upstream
For circles for which no expression patterns are present, check if their linear counterparts are expressed or no
Also check their % of cells expressing this molecule
=======
For circles for which no expression patterns are present, check if their linear counterparts are expressed or no Also check their % of cells expressing this molecule

>>>>>>> Stashed changes
```{r}
vec_mean_expr_circle <- c()
vec_mean_expr_linear <- c()
fig_dict <- "/prj/XeniumProbeDesign/heart_human_29072024/analysis_figures/"
for (each_circle in circles){
  # print(each_circle)
  gene <- strsplit(each_circle, "-")[[1]][1]
  all_grep <- Features(xenium.obj_18072)[grepl(gene, Features(xenium.obj_18072))]
  each_linear <- all_grep[grepl("FSJ", all_grep)]
  
  expr_circle <- xenium.obj_18072[["SCT"]]$data[each_circle,]
  expr_linear <- xenium.obj_18072[["SCT"]]$data[each_linear,]
  
  percent_cells_expressed_circle <- sum(xenium.obj_18072[["SCT"]]$data[each_circle,] > 0)/length(Cells(xenium.obj_18072))*100
  percent_cells_expressed_linear <- sum(xenium.obj_18072[["SCT"]]$data[each_linear,] > 0)/length(Cells(xenium.obj_18072))*100
  
  print(paste(each_circle, each_linear, percent_cells_expressed_circle, percent_cells_expressed_linear, mean(expr_circle), mean(expr_linear), max(expr_circle), max(expr_linear), as.vector(cor.test(expr_circle, expr_linear)$estimate)))
  
  vec_mean_expr_circle <- c(vec_mean_expr_circle, mean(expr_circle))
  vec_mean_expr_linear <- c(vec_mean_expr_linear, mean(expr_linear))
  # featureplot
  png(paste(fig_dict, "featureplot_circle_linear_", gene, ".png", sep = ""), width = 1000, height = 600)
  print(FeaturePlot(xenium.obj_18072, c(each_circle, each_linear), label = T, pt.size = 1)) #, order=T)
  dev.off()
}
```

<!-- Among these, only a few circles seem to have higher expressions -->
<<<<<<< Updated upstream
<!-- ```{r fig.align='center'} -->
<!-- VlnPlot(xenium.obj_18072, c("SLC8A1-BSJ"), group.by = "seurat_clusters", pt.size = 0, combine = F) -->
<!-- ``` -->

UMAP + spatial plot
=======

<!-- ```{r fig.align='center'} -->

<!-- VlnPlot(xenium.obj_18072, c("SLC8A1-BSJ"), group.by = "seurat_clusters", pt.size = 0, combine = F) -->

<!-- ``` -->

UMAP + spatial plot

>>>>>>> Stashed changes
```{r fig.align='center', fig.width=20, fig.height=10}
plot_featureplots("SLC8A1-BSJ")
```

Circles and their hosts expression distribution
<<<<<<< Updated upstream
```{r fig.align='center'}
boxplot(vec_mean_expr_circle, vec_mean_expr_linear, names = c("Circle", "Linear"), col = c("red","blue"))
```

=======

```{r fig.align='center'}
boxplot(vec_mean_expr_circle, vec_mean_expr_linear, names = c("Circle", "Linear"), col = c("red","blue"))
```
>>>>>>> Stashed changes
